{
    "collab_server" : "",
    "contents" : "# function gets current market data for every company\n# transforms market data to signal data\n# calls Azure web service for a desired tendency\n# transforms incoming data from Azure to price movement forecast\n\n# source indicators\nsource(\"indicators/StochRSI.R\")\nsource(\"indicators/TRIX.R\")\nsource(\"indicators/ADL.R\")\nsource(\"indicators/ROC.R\")\nsource(\"indicators/BBands.R\")\nsource(\"indicators/SAR.R\")\nsource(\"indicators/ADX.R\")\nsource(\"indicators/ForceIndex.R\")\nsource(\"indicators/AROON.R\")\n\n# source preprocessing function\nsource(\"preprocessDataForAzure.R\")\n\n# today we want to predict from past close prices \nyesterday = as.Date(Sys.Date(),format=\"%Y-%m-%d\")-1\nstartDay = yesterday - 170\n\n# initial values\n# datesAndRatesForPredicitons = data.frame(ten3Date = yesterday-40,ten7Date = yesterday-40,ten14Date = yesterday-40,ten30Date = yesterday-40,\n#                    AAPLten3Signal = \"rise\",AAPLten3Accuracy = 50,AAPLten7Signal = \"rise\",AAPLten7Accuracy = 50,AAPLten14Signal = \"rise\",AAPLten14Accuracy = 50,AAPLten30Signal = \"rise\",AAPLten30Accuracy = 50,\n#                    BACten3Signal = \"rise\",BACten3Accuracy = 50,BACten7Signal = \"rise\",BACten7Accuracy = 50,BACten14Signal = \"rise\",BACten14Accuracy = 50,BACten30Signal = \"rise\",BACten30Accuracy = 50,\n#                    INTCten3Signal = \"rise\",INTCten3Accuracy = 50,INTCten7Signal = \"rise\",INTCten7Accuracy = 50,INTCten14Signal = \"rise\",INTCten14Accuracy = 50,INTCten30Signal = \"rise\",INTCten30Accuracy = 50)\n# write.csv(datesAndRatesForPredicitons,\"data/datesAndRatesForPredicitons.csv\",row.names=FALSE)\n\n# vector of companies and tendencies\ncompanies = c(\"AAPL\",\"BAC\",\"INTC\")\ntendencies = vector()\ntendency = c(1,3,7,14,30)\nmarket = \"NASDAQ\"\n\n# help vectors for parsing url for yahoo finance\ned = vector()\ned[1] = as.character(format(yesterday,\"%b\"))\ned[2] = as.numeric(format(yesterday,\"%d\"))\ned[3] = as.numeric(format(yesterday,\"%Y\"))\n\nsd = vector()\nsd[1] = as.character(format(startDay,\"%b\")) \nsd[2] = as.numeric(format(startDay,\"%d\"))\nsd[3] = as.numeric(format(startDay,\"%Y\"))\n\n# read last predicted dates for periods 3,7,14,30\ndatesAndRatesForPredicitons = read.csv(\"data/datesAndRatesForPredicitons.csv\", as.is = TRUE)\n\n# decide for which tendency we need to make prediction\nif((yesterday-as.Date(datesAndRatesForPredicitons[1,\"ten3Date\"]))>=2){\n  tendencies = c(tendencies,3)\n}\n\nif((yesterday-as.Date(datesAndRatesForPredicitons[1,\"ten7Date\"]))>=6){\n  tendencies = c(tendencies,7)\n}\n\nif((yesterday-as.Date(datesAndRatesForPredicitons[1,\"ten14Date\"]))>=13){\n  tendencies = c(tendencies,14)\n}\n\nif((yesterday-as.Date(datesAndRatesForPredicitons[1,\"ten30Date\"]))>=13){\n  tendencies = c(tendencies,30)\n}\n\n# process data for Azure ML\nif(length(tendencies>0)){\n  for(companiesIndex in 1:length(companies)){\n    processedData = data.frame()\n    \n    if(companies[companiesIndex] == \"BAC\")\n      market = \"NYSE\"\n    else\n      market = \"NASDAQ\"\n    \n    processedData = read.csv(url(paste0(\"http://www.google.com/finance/historical?q=\",market,\":\",companies[companiesIndex],\n                                        \"&startdate=\",sd[1],\"+,\",sd[2],\"%2C+\",sd[3],\n                                        \"&enddate=\",ed[1],\"+\",ed[2],\"%2C+\",ed[3],\"&output=csv\")))\n  \n    processedData = PreprocessDataForAzure(processedData)\n    \n    processedData = processedData[(nrow(processedData)-1):nrow(processedData),]\n    \n    optimalizedIndicatorsParam = read.csv(paste0(\"data/backupOptimizedParameters/backupSignals\",companies[companiesIndex],\".csv\"))\n    \n    \n    # process dataFrame for Azure\n    for(tendencyIndex in 1:length(tendency)){\n      \n      processedData = ADX(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,4],optimalizedIndicatorsParam[tendencyIndex,5])\n      processedData = ForceIndex(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,9],optimalizedIndicatorsParam[tendencyIndex,10])\n      processedData = ROC(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,14],optimalizedIndicatorsParam[tendencyIndex,15],optimalizedIndicatorsParam[tendencyIndex,16],optimalizedIndicatorsParam[tendencyIndex,17])\n      processedData = StochRSI(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,27],optimalizedIndicatorsParam[tendencyIndex,28],optimalizedIndicatorsParam[tendencyIndex,29],optimalizedIndicatorsParam[tendencyIndex,30],optimalizedIndicatorsParam[tendencyIndex,31],optimalizedIndicatorsParam[tendencyIndex,32],optimalizedIndicatorsParam[tendencyIndex,33])\n      processedData = TRIX(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,44],optimalizedIndicatorsParam[tendencyIndex,45])\n      processedData = ADL(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,37],optimalizedIndicatorsParam[tendencyIndex,38],optimalizedIndicatorsParam[tendencyIndex,39],optimalizedIndicatorsParam[tendencyIndex,40])\n      processedData = BBands(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,55])\n      processedData = SAR(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,49],optimalizedIndicatorsParam[tendencyIndex,50],optimalizedIndicatorsParam[tendencyIndex,51])\n      processedData = AROON(processedData,tendency[tendencyIndex],optimalizedIndicatorsParam[tendencyIndex,21],optimalizedIndicatorsParam[tendencyIndex,22],optimalizedIndicatorsParam[tendencyIndex,23])\n    }\n    \n    processedData = processedData[,c(\"SignalADX1\",\"SignalForceIndex1\",\"SignalROC1\",\"SignalStochRSI1\",\"SignalTRIX1\",\"SignalADL1\",\"SignalBBands1\",\"SignalSAR1\",\"SignalAROON1\",\n                                     \"SignalADX3\",\"SignalForceIndex3\",\"SignalROC3\",\"SignalStochRSI3\",\"SignalTRIX3\",\"SignalADL3\",\"SignalBBands3\",\"SignalSAR3\",\"SignalAROON3\",\n                                     \"SignalADX7\",\"SignalForceIndex7\",\"SignalROC7\",\"SignalStochRSI7\",\"SignalTRIX7\",\"SignalADL7\",\"SignalBBands7\",\"SignalSAR7\",\"SignalAROON7\",\n                                     \"SignalADX14\",\"SignalForceIndex14\",\"SignalROC14\",\"SignalStochRSI14\",\"SignalTRIX14\",\"SignalADL14\",\"SignalBBands14\",\"SignalSAR14\",\"SignalAROON14\",\n                                     \"SignalADX30\",\"SignalForceIndex30\",\"SignalROC30\",\"SignalStochRSI30\",\"SignalTRIX30\",\"SignalADL30\",\"SignalBBands30\",\"SignalSAR30\",\"SignalAROON30\")]\n    \n    processedData = processedData[nrow(processedData),]\n    \n    for(tendenciesIndex in 1:length(tendencies)){\n      # call Azure Web Service\n      source(paste0(\"azureWebservices/webserviceTen\",tendencies[tendenciesIndex],companies[companiesIndex],\".R\"))\n      datesAndRatesForPredicitons[1,paste0(companies[companiesIndex],\"ten\",tendencies[tendenciesIndex],\"Signal\")] = Result[1]\n      datesAndRatesForPredicitons[1,paste0(companies[companiesIndex],\"ten\",tendencies[tendenciesIndex],\"Accuracy\")] = as.numeric(Result[2])\n      datesAndRatesForPredicitons[1,paste0(\"ten\",tendencies[tendenciesIndex],\"Date\")] = as.character(yesterday)\n    }\n  }\n  write.csv(datesAndRatesForPredicitons, file = \"data/datesAndRatesForPredicitons.csv\",row.names=FALSE)\n}\n\n",
    "created" : 1495005721988.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "948929121",
    "id" : "9C5302C",
    "lastKnownWriteTime" : 1495440750,
    "last_content_update" : 1495440750351,
    "path" : "C:/Users/Patres/Desktop/LukasDombrovskyMonitorovaciaPlatformaVCloude/Zdrojove kody/StockPredict/main/getPredictionsFromAzure.R",
    "project_path" : "getPredictionsFromAzure.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}