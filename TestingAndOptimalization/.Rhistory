source("indicators/StochRSI.R")
stockList = c("AAPL","BAC","INTC")
dataset1 = read.csv(paste0("data/RawStockData/",stockList[1],"_daily_5Y.csv"))
head(dataset1)
source("preprocessData.R")
a = read.csv(file = paste0("data/SignalsForClassification5YO/signals",stockList[1],"5Y.csv"))
a = read.csv(paste0("data/SignalsForClassification5YO/signals",stockList[1],"5Y.csv"))
getwd()
a = read.csv(paste0("data/SignalsForClassification5YO/signals",stockList[1],"5Y.csv"))
paste0("data/SignalsForClassification5YO/signals",stockList[1],"5Y.csv")
a = read.csv(paste0("data/SignalsForClassification5YO/signalsAPPL5Y.csv"))
dataset = read.csv(paste0("data/SignalsForClassification5YO/signalsAPPL5Y.csv"))
head(dataset)
dataset = read.csv(paste0("data/SignalsForClassification5YO/signalsAPPL5Y.csv"))
head(dataset[,c("SignalADX1","SignalROC1","SignalStochRSI1","Tendency.1")])
function counts silent rows in 10 year Apple data
library(ggplot2)
library(plotly)
library(dplyr)
dataset1 = data.frame()
dataset1 = read.csv("data/SignalsForClassification5YO/signalsAPPL10Y.csv")
tendency = c(1,3,7,14,30)
silentIndicators = c(9,8,7,6,5)
silentRows = data.frame()
silentIndicatorsInRow = data.frame()
for(rowIndex in 1:nrow(dataset1)){
column = -9
for(tendencyIndex in 1:5){
column = column + 10
count = 0
for(columnIndex in column:(column+8)){
if("silent" == dataset1[rowIndex,columnIndex]){
count = count + 1
}
}
silentIndicatorsInRow[rowIndex,tendencyIndex] = count
}
}
counter = 0
for(silentIndicatorsIndex in 1:length(silentIndicators)){
for(columnIndex in 1:5){
count = 0
for(rowIndex in 1:nrow(silentIndicatorsInRow)){
if(silentIndicatorsInRow[rowIndex,columnIndex] == silentIndicators[silentIndicatorsIndex]){
count = count + 1
}
}
counter = counter + 1
silentRows[counter,"silentRows"] = count
silentRows[counter,"numberOfSilentIndicators"] = as.character(silentIndicators[silentIndicatorsIndex])
silentRows[counter,"columnIndex"] = as.character(tendency[columnIndex])
}
}
write.csv(silentRows, file = "data/classificationTestedData/silentRows.csv",row.names=FALSE)
silentRows %>% group_by(columnIndex) %>%
plot_ly(x=~columnIndex,y=~silentRows, color=~numberOfSilentIndicators, type = "bar") %>%
layout(title = "Number of silent rows by number of silent indicators, grouped by tendency",
xaxis = list(title = "Tendency")) %>%
add_annotations( text="NumberOfSilentIndicators", xref="paper", yref="paper",
x=0.90, xanchor="left",
y=0.9, yanchor="bottom",    # Same y as legend below
legendtitle=TRUE, showarrow=FALSE ) %>%
layout( legend=list(y=0.9, yanchor="top") )
# Script finds and visualise best time period for classification
# of historical data for a 3 different stocks
library(ggplot2)
library(plotly)
library(dplyr)
# AAPL
tendency = c(1,3,7,14,30)
numberOfYears = c(1,2,3,4,5,10)
meanAccuracy = data.frame()
counter = 0
for(tendencyIndex in 1:length(tendency)){
for(numberOfYearsIndex in 1:length(numberOfYears)){
counter = counter + 1
DF = read.csv(paste0("data/ClassificationSuccessRatesAPPL/","ten",
tendency[tendencyIndex],"PredictionOn",
numberOfYears[numberOfYearsIndex],"Ydata.csv"))
DF = DF[order(DF$Accuracy,decreasing = T),]
meanAccuracy[counter,"BestAccuracy"] = DF[1,"Accuracy"]
if(numberOfYears[numberOfYearsIndex]<10)
meanAccuracy[counter,"NumberOfYears"] = paste0("0",as.character(numberOfYears[numberOfYearsIndex])," years")
else
meanAccuracy[counter,"NumberOfYears"] = paste0(as.character(numberOfYears[numberOfYearsIndex])," years")
if(tendency[tendencyIndex]<10)
meanAccuracy[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
meanAccuracy[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
}
}
write.csv(meanAccuracy, file = "data/classificationTestedData/meanAccuracyAAPL.csv",row.names=FALSE)
meanAccuracy %>% group_by(Tendency) %>%
plot_ly(x=~Tendency,y=~BestAccuracy, color=~NumberOfYears ) %>%
layout(title = "Best time period for classification Apple")
# BAC
tendency = c(1,3,7,14,30)
numberOfYears = 1
aAndT = data.frame()
counter = 0
for(tendencyIndex in 1:length(tendency)){
DF = read.csv(paste0("data/ClassificationSuccessRatesBAC/","ten",
tendency[tendencyIndex],"BAC",
numberOfYears,"Y.csv"))
DF = DF[order(DF$Accuracy,decreasing = T),]
counter = counter + 1
aAndT[counter,"Accuracy"] = mean(DF[1:2,"Accuracy"])
if(tendency[tendencyIndex]<10)
aAndT[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
aAndT[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
aAndT[counter,"Algorithm"] = "Mean of two best algotithms"
for(algorithmIndex in 1:6){
counter = counter + 1
aAndT[counter,"Accuracy"] = DF[algorithmIndex,"Accuracy"]
if(tendency[tendencyIndex]<10)
aAndT[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
aAndT[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
aAndT[counter,"Algorithm"] = as.character(DF[algorithmIndex,"Algorithm"])
}
}
write.csv(aAndT, file = "data/classificationTestedData/aAndTBAC.csv",row.names=FALSE)
aAndT %>% group_by(Tendency) %>%
plot_ly(x=~Tendency,y=~Accuracy, color=~Algorithm, type = 'scatter',
mode = 'markers', marker = list(size = 15)) %>%
layout(yaxis = list(range=c(0.3,1)),title = "Best tendencies and algorithms for classification Bank of America")
# INTC
tendency = c(1,3,7,14,30)
numberOfYears = 1
aAndT = data.frame()
counter = 0
for(tendencyIndex in 1:length(tendency)){
DF = read.csv(paste0("data/ClassificationSuccessRatesINTC/","ten",
tendency[tendencyIndex],"INTC",
numberOfYears,"Y.csv"))
DF = DF[order(DF$Accuracy,decreasing = T),]
counter = counter + 1
aAndT[counter,"Accuracy"] = mean(DF[1:2,"Accuracy"])
if(tendency[tendencyIndex]<10)
aAndT[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
aAndT[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
aAndT[counter,"Algorithm"] = "Mean of two best algotithms"
for(algorithmIndex in 1:6){
counter = counter + 1
aAndT[counter,"Accuracy"] = DF[algorithmIndex,"Accuracy"]
if(tendency[tendencyIndex]<10)
aAndT[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
aAndT[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
aAndT[counter,"Algorithm"] = as.character(DF[algorithmIndex,"Algorithm"])
}
}
write.csv(aAndT, file = "data/classificationTestedData/aAndTINTC.csv",row.names=FALSE)
aAndT %>% group_by(Tendency) %>%
plot_ly(x=~Tendency,y=~Accuracy, color=~Algorithm, type = 'scatter',
mode = 'markers', marker = list(size = 15)) %>%
layout(title = "Best tendencies and algorithms for classification Intel")
# BAC
tendency = c(1,3,7,14,30)
numberOfYears = 1
aAndT = data.frame()
counter = 0
for(tendencyIndex in 1:length(tendency)){
DF = read.csv(paste0("data/ClassificationSuccessRatesBAC/","ten",
tendency[tendencyIndex],"BAC",
numberOfYears,"Y.csv"))
DF = DF[order(DF$Accuracy,decreasing = T),]
counter = counter + 1
aAndT[counter,"Accuracy"] = mean(DF[1:2,"Accuracy"])
if(tendency[tendencyIndex]<10)
aAndT[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
aAndT[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
aAndT[counter,"Algorithm"] = "Mean of two best algotithms"
for(algorithmIndex in 1:6){
counter = counter + 1
aAndT[counter,"Accuracy"] = DF[algorithmIndex,"Accuracy"]
if(tendency[tendencyIndex]<10)
aAndT[counter,"Tendency"] = paste0("+0",tendency[tendencyIndex],"days")
else
aAndT[counter,"Tendency"] = paste0("+",tendency[tendencyIndex],"days")
aAndT[counter,"Algorithm"] = as.character(DF[algorithmIndex,"Algorithm"])
}
}
write.csv(aAndT, file = "data/classificationTestedData/aAndTBAC.csv",row.names=FALSE)
aAndT %>% group_by(Tendency) %>%
plot_ly(x=~Tendency,y=~Accuracy, color=~Algorithm, type = 'scatter',
mode = 'markers', marker = list(size = 15)) %>%
layout(yaxis = list(range=c(0.3,1)),title = "Best tendencies and algorithms for classification Bank of America")
validatedDFADX = data.frame()
source("optimalization/testAndValidateForceIndex.R")
validatedDFADX = testAndValidateADX()
validatedDFADX = data.frame()
source("optimalization/testAndValidateADX.R")
validatedDFADX = testAndValidateADX()
dataset1 = read.csv(paste0("data/RawStockData/",stockList[1],"_daily_1Y.csv"))
dataset1 = PreprocessData(dataset1)
validatedDFADX = data.frame()
source("optimalization/testAndValidateADX.R")
validatedDFADX = testAndValidateADX()
View(dataset1)
validatedDF = data.frame()
tendency = c(1,3,7,14,30)
for(indexSR in 1:5){
testedDF = data.frame()
testIndex = 0
bestSuccessRate = 0
maxNumberOfSignals = 0
bestIndex = 1
# initial values
mainPeriod = c(2,10,20)
trendBorder = c(15,27,35)
# testing
for(a in 1:length(mainPeriod)){
for(b in 1:length(trendBorder)){
#test strategy
data = ADX(data,tendency[indexSR],mainPeriod[a],trendBorder[b])
# success rate
testIndex = testIndex + 1
testedDF[testIndex,"SuccessRate"] = scoreIndicator(data,paste0("ADX",tendency[indexSR]),tendency[indexSR])
if(testedDF[testIndex,"SuccessRate"]>bestSuccessRate){
bestSuccessRate = testedDF[testIndex,"SuccessRate"]
bestIndex = testIndex
}
# save parameters values
testedDF[testIndex,"MainPeriod"] = mainPeriod[a]
testedDF[testIndex,"TrendBorder"] = trendBorder[b]
# number of indicator signals
numberOfSignals = 0
for(x in 1:nrow(data)){
if(data[x,paste0("SignalADX",tendency[indexSR])] == "rise" || data[x,paste0("SignalADX",tendency[indexSR])] == "fall")
numberOfSignals = numberOfSignals + 1
}
testedDF[testIndex,"NumberOfSignals"] = numberOfSignals
if(testedDF[testIndex,"NumberOfSignals"]>maxNumberOfSignals)
maxNumberOfSignals = testedDF[testIndex,"NumberOfSignals"]
}
}
# validation more volatile
bestIndex = 1
for(validationIndex in 2:nrow(testedDF)){
if(testedDF[validationIndex,"NumberOfSignals"]>(0.35*maxNumberOfSignals) &&
testedDF[bestIndex,"SuccessRate"] < testedDF[validationIndex,"SuccessRate"]){
bestIndex = validationIndex
}
}
# best settings for a current tendency
validatedDF[indexSR,"Period"] = tendency[indexSR]
validatedDF[indexSR,"SuccessRate"] = testedDF[bestIndex,"SuccessRate"]
validatedDF[indexSR,"NumberOfSignals"] = testedDF[bestIndex,"NumberOfSignals"]
validatedDF[indexSR,"MainPeriod"] = testedDF[bestIndex,"MainPeriod"]
validatedDF[indexSR,"TrendBorder"] = testedDF[bestIndex,"TrendBorder"]
}
dataset1[1,paste0("High-",i)]
paste0("High-",i)
dataset1[1,paste0("Low-",i)]
dataset1[i,"High-3"]
View(dataset1)
data = dataset1
validatedDFADX = data.frame()
source("optimalization/testAndValidateADX.R")
validatedDFADX = testAndValidateADX()
View(validatedDFADX)
validatedDFForceIndex = data.frame()
source("optimalization/testAndValidateForceIndex.R")
validatedDFForceIndex = testAndValidateForceIndex()
View(validatedDFForceIndex)
validatedDFROC = data.frame()
source("optimalization/testAndValidateROC.R")
validatedDFROC = testAndValidateROC()
View(validatedDFROC)
validatedDFAROON = data.frame()
source("optimalization/testAndValidateAROON.R")
validatedDFAROON = testAndValidateAROON()
View(validatedDFAROON)
validatedDFStochRSI = data.frame()
source("optimalization/testAndValidateStochRSI.R")
validatedDFStochRSI = testAndValidateStochRSI()
View(validatedDFStochRSI)
validatedDFADL = data.frame()
source("optimalization/testAndValidateADL.R")
validatedDFADL = testAndValidateADL()
validatedDFTRIX = data.frame()
source("optimalization/testAndValidateTRIX.R")
validatedDFTRIX = testAndValidateTRIX()
View(validatedDFADL)
View(validatedDFTRIX)
validatedDFSAR = data.frame()
source("optimalization/testAndValidateSAR.R")
validatedDFSAR = testAndValidateSAR()
View(validatedDFSAR)
validatedDFBBands = data.frame()
source("optimalization/testAndValidateBBands.R")
validatedDFBBands = testAndValidateBBands()
View(validatedDFBBands)
